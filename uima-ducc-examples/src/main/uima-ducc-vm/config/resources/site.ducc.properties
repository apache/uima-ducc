 -----------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----

ducc.cluster.name=Apache UIMA-DUCC

# When set to "False" this property bypasses use of ssh.        
# It is intended for use ONLY by DUCC developers. It allows developers of DUCC 
# to simulate a multinode environment without the need for ssh to "remote" nodes
# for a single host deployment.         
# Note: WARNING! Enabling this feature in a production DUCC system is a serious
# distributed computing usability hindrance. It should only be set by DUCC developers 
# for testing or demo purposes.
ducc.ssh = false 

# When set to "Test" this property bypasses userid and authentication checks. It is intended 
# for use ONLY by DUCC developers. It allows developers of DUCC to simulate a multiuser 
# environment without the need for root privileges.        
# Note: WARNING! Enabling this feature in a production DUCC system is a serious
# security breach. It should only be set by DUCC developers running with an un-privileged
# ducc_ling.
ducc.runmode = Test

ducc.runmode.pw = quack

ducc.broker.name=${ducc.head}
ducc.broker.jmx.port=9999

# allow services to use DUCC's broker
ducc.broker.configuration = conf/activemq-ducc-unsecure.xml

# for Sun (Oracle) JVM: -XX:+HeapDumpOnOutOfMemoryError
# for Sun (Oracle) JVM: -XX:HeapDumpPath=/home/ducc/dump

ducc.heap.dump.path = /home/ducc/dump

ducc.broker.memory.options = -Xmx300M -XX:+HeapDumpOnOutOfMemoryError
ducc.agent.jvm.args        = -Xmx150M -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${ducc.heap.dump.path}
ducc.orchestrator.jvm.args = -Xmx150M -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${ducc.heap.dump.path}
ducc.rm.jvm.args           = -Xmx150M -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${ducc.heap.dump.path}
ducc.pm.jvm.args           = -Xmx200M -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${ducc.heap.dump.path}
ducc.sm.jvm.args           = -Xmx200M -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${ducc.heap.dump.path}
ducc.db.jvm.args           = -Xmx150M -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${ducc.heap.dump.path}
ducc.ws.jvm.args           = -Xmx200M -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${ducc.heap.dump.path} -Djava.util.Arrays.useLegacyMergeSort=true

ducc.jmx.port=11000

ducc.ws.login.enabled = false
ducc.ws.max.history.entries = 128

ducc.jd.host.number.of.machines = 1
ducc.jd.host.memory.size=1GB

ducc.jd.configuration.class=org.apache.uima.ducc.transport.configuration.jd.JobDriverConfiguration
ducc.job-process.configuration.class=org.apache.uima.ducc.transport.configuration.jp.JobProcessConfiguration

ducc.service.configuration.class=org.apache.uima.ducc.transport.configuration.service.ServiceConfiguration

ducc.rm.fragmentation.threshold = 1
ducc.rm.share.quantum = 15

ducc.agent.rogue.process.user.exclusion.filter=root,postfix,ntp,nobody,daemon,100,degenaro,messagebus,nslcd,syslog,whoopsie,ducc
ducc.agent.node.metrics.publish.rate=30000
ducc.agent.node.inventory.publish.rate=15000
